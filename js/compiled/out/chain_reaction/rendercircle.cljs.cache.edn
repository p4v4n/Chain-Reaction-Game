{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name chain-reaction.rendercircle, :imports nil, :requires nil, :uses nil, :defs {one-circle {:protocol-inline nil, :meta {:file "/home/pavan/Desktop/my projects at geekskool/chain-reaction/src/chain_reaction/rendercircle.cljs", :line 3, :column 7, :end-line 3, :end-column 17, :arglists (quote ([i j color]))}, :name chain-reaction.rendercircle/one-circle, :variadic false, :file "/home/pavan/Desktop/my projects at geekskool/chain-reaction/src/chain_reaction/rendercircle.cljs", :end-column 17, :method-params ([i j color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 3, :fn-var true, :arglists (quote ([i j color]))}, two-circles {:protocol-inline nil, :meta {:file "/home/pavan/Desktop/my projects at geekskool/chain-reaction/src/chain_reaction/rendercircle.cljs", :line 12, :column 7, :end-line 12, :end-column 18, :arglists (quote ([i j color]))}, :name chain-reaction.rendercircle/two-circles, :variadic false, :file "/home/pavan/Desktop/my projects at geekskool/chain-reaction/src/chain_reaction/rendercircle.cljs", :end-column 18, :method-params ([i j color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([i j color]))}, three-circles {:protocol-inline nil, :meta {:file "/home/pavan/Desktop/my projects at geekskool/chain-reaction/src/chain_reaction/rendercircle.cljs", :line 29, :column 7, :end-line 29, :end-column 20, :arglists (quote ([i j color]))}, :name chain-reaction.rendercircle/three-circles, :variadic false, :file "/home/pavan/Desktop/my projects at geekskool/chain-reaction/src/chain_reaction/rendercircle.cljs", :end-column 20, :method-params ([i j color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 3, :fn-var true, :arglists (quote ([i j color]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:r :stroke :fill :circle :stroke-width :cx :cy :svg}, :order [:circle :cx :cy :r :fill :stroke :stroke-width :svg]}, :doc nil}